# Nome do workflow, que aparecerá na aba "Actions" do GitHub
name: Flutter CI - Lint, Format & Test

# Define os gatilhos que disparam o workflow
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Define os jobs a serem executados
jobs:
  build_and_test:
    # Máquina virtual onde o job será executado
    runs-on: ubuntu-latest

    # Sequência de passos que o job executa
    steps:
      # 1. Clona o seu repositório para a máquina virtual
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Configura o ambiente Flutter SDK
      # Esta action instala o Flutter e o adiciona ao PATH
      - name: Configurar Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable' # Você pode usar 'beta', 'dev' ou 'master'

      # 3. Instala todas as dependências do projeto
      - name: Instalar dependências
        run: flutter pub get

      # 4. Verifica a formatação do código. O build falhará se algum arquivo não estiver formatado.
      - name: Verificar formatação
        run: flutter format --output=none --set-exit-if-changed .

      # 5. Roda o linter e o analisador estático.
      # A flag '--fatal-infos' trata avisos como erros, forçando um código mais limpo.
      - name: Analisar e rodar o Linter
        run: flutter analyze --fatal-infos

      # 6. Roda a suíte de testes do projeto.
      - name: Rodar os testes
        run: flutter test
